import React, { useEffect } from "react";
import { Divider, Feed, Header, Icon, Pagination, PaginationProps } from "semantic-ui-react";
import { FeedEventProps } from "semantic-ui-react/dist/commonjs/views/Feed/FeedEvent";
import { getPlayersMap } from "../QHDataLoader/QHDataLoader";
import { DbBadge } from "../../types/database/models";
import { TTDataPropsTypeCombined } from "../../containers/shared";

export interface AchievementFeedProps {
    focusedPlayerId?: string;
}

function AchievementFeed(props: AchievementFeedProps & TTDataPropsTypeCombined): JSX.Element {
    const PAGE_SIZE = 5;
    const [achievements, setAchievements] = React.useState<DbBadge[]>([]);
    const [currentPage, setCurrentPage] = React.useState<number>(1);

    // Runs on mount.
    useEffect(() => {
        sortAndFilterAchievements();
    }, []);

    // When achievements change, re-sort them.
    useEffect(() => {
        sortAndFilterAchievements();
    }, [props.badges]);

    const sortAndFilterAchievements = (): void => {
        // Only include badges involving this player.
        const relevantBadges = props.badges.filter((badge: DbBadge) => badge.player_id === props.focusedPlayerId);

        // Sort list from newest to oldest
        relevantBadges.sort((badgeA, badgeB) => new Date(badgeB.date).getTime() - new Date(badgeA.date).getTime());

        // Set it in state.
        setAchievements(relevantBadges);
    };

    // Calculate the global percentage of players who have obtained this achievement.
    const calculateAttainmentPercentage = (focusedBadge: DbBadge): number => {
        const badgeHolders: DbBadge[] = props.badges.filter((badge: DbBadge) => badge.key === focusedBadge.key);
        const percentage = (badgeHolders.length / props.players.length) * 100;

        return percentage;
    };

    // Obtain a feed of achievements that the focused player has obtained.
    const getAchievements = (): FeedEventProps[] => {
        if (achievements.length === 0 || props.players.length === 0) {
            return [];
        }

        const events: FeedEventProps[] = [];
        const playersMap = getPlayersMap(props.players);

        // Use index access for pagination, with a max result size of PAGE_SIZE and offset generated by the current page
        // * page-size.
        // - 1 as `currentPage` starts at 1, but we actually start at 0 for our page offset calculations.
        const offset = (currentPage - 1) * PAGE_SIZE;
        const nextPageOffset = currentPage * PAGE_SIZE;

        for (let i = offset; i < nextPageOffset; i++) {
            if (i > achievements.length - 1) {
                break;
            }

            const badge = achievements[i];

            const involvedPlayer = playersMap.get(badge.involved_player);
            const attainmentPercentage = calculateAttainmentPercentage(badge);

            events.push({
                key: badge.id,
                meta: (
                    <div className={"event-summary"}>
                        {badge.text}
                        <div className={attainmentPercentage < 10 ? "achievement-stats-rare" : "achievement-stats"}>
                            {attainmentPercentage.toFixed(1)}% of players have this achievement
                        </div>
                        <Divider />
                    </div>
                ),
                date: (
                    <div className={"event-date"}>
                        {new Date(badge.date).toDateString()} during a match against:{" "}
                        <Icon name={involvedPlayer?.icon} /> {involvedPlayer?.name}
                    </div>
                ),
                content: <div className={"event-content"}>{badge.title}</div>,
                icon: badge.icon,
            });
        }

        return events;
    };

    const getTotalPages = (): number => {
        return Math.max(Math.ceil(achievements.length / PAGE_SIZE), 1);
    };

    const handlePageChange = (event: React.MouseEvent<HTMLAnchorElement>, data: PaginationProps): void => {
        setCurrentPage(data.activePage as number);
    };

    return (
        <div className="achievements">
            <Header as={"h2"} icon>
                <Icon name="trophy" circular />
                <Header.Content>Achievements</Header.Content>
            </Header>
            <Feed className={"achievements-feed"} events={getAchievements()} />
            {
                /* Show pagination if number of pages is greater than 1 */
                getTotalPages() > 1 && (
                    <Pagination
                        totalPages={getTotalPages()}
                        defaultActivePage={1}
                        onPageChange={handlePageChange}
                        siblingRange={0}
                        firstItem={null}
                        lastItem={null}
                    />
                )
            }
        </div>
    );
}

export default AchievementFeed;
